INSTANTIATE_TEST_CASE_P(topsaten, TrilStrideTest,
                        testing::Values(
  topsatenTrilStrideTestParam{
      "input_non_contiguous_01",
      {11, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0         //  k
  },
  topsatenTrilStrideTestParam{
      "input_non_contiguous_02",
      {4, 2, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0          //  k
  },
  topsatenTrilStrideTestParam{
      "input_non_contiguous_03",
      {1, 3, 2, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0             //  k
  },
  topsatenTrilStrideTestParam{
      "input_non_contiguous_04",
      {1, 24, 7, 5, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0                 //  k
  },
  topsatenTrilStrideTestParam{
      "output_non_contiguous_01",
      {11, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0         //  k
  },
  topsatenTrilStrideTestParam{
      "output_non_contiguous_02",
      {4, 2, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0          //  k
  },
  topsatenTrilStrideTestParam{
      "output_non_contiguous_03",
      {1, 3, 2, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0             //  k
  },
  topsatenTrilStrideTestParam{
      "output_non_contiguous_04",
      {1, 24, 7, 5, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0                 //  k
  },
  topsatenTrilStrideTestParam{
      "all_non_contiguous_01",
      {11, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0         //  k
  },
  topsatenTrilStrideTestParam{
      "all_non_contiguous_02",
      {4, 2, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0          //  k
  },
  topsatenTrilStrideTestParam{
      "all_non_contiguous_03",
      {1, 3, 2, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0             //  k
  },
  topsatenTrilStrideTestParam{
      "all_non_contiguous_04",
      {1, 24, 7, 5, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0                 //  k
  },
  topsatenTrilStrideTestParam{
      "Overlap_01",
      {11, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0         //  k
  },
  topsatenTrilStrideTestParam{
      "Overlap_03",
      {4, 2, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0          //  k
  },
  topsatenTrilStrideTestParam{
      "Overlap_03",
      {1, 3, 2, 24},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0             //  k
  },
  topsatenTrilStrideTestParam{
      "Overlap_04",
      {1, 24, 7, 5, 1},  // input_shape
      {},         // input_stride
      {},         // out_shape
      {},         // out_stride
      0                 //  k
  }
  ),
  TrilTest::PrintToStringParamName());
